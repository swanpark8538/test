package {{defaultPackageName}}.config;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import javax.transaction.SystemException;

import org.springframework.aop.Advisor;
import org.springframework.aop.aspectj.AspectJExpressionPointcut;
import org.springframework.aop.support.DefaultPointcutAdvisor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.EnableAspectJAutoProxy;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.TransactionDefinition;
import org.springframework.transaction.annotation.EnableTransactionManagement;
import org.springframework.transaction.interceptor.NameMatchTransactionAttributeSource;
import org.springframework.transaction.interceptor.RollbackRuleAttribute;
import org.springframework.transaction.interceptor.NoRollbackRuleAttribute;
import org.springframework.transaction.interceptor.RuleBasedTransactionAttribute;
import org.springframework.transaction.interceptor.TransactionAttribute;
import org.springframework.transaction.interceptor.TransactionInterceptor;
import org.springframework.transaction.jta.JtaTransactionManager;

import com.atomikos.icatch.jta.UserTransactionImp;
import com.atomikos.icatch.jta.UserTransactionManager;

@Configuration
@EnableAspectJAutoProxy(proxyTargetClass = true)
{{#if chkAnnotationTransactionManagement}}
@EnableTransactionManagement
{{/if}}
public class {{txtFileName}} {

    @Bean
    public UserTransactionImp userTransaction() {
        UserTransactionImp userTransaction = new UserTransactionImp();
        try {
            userTransaction.setTransactionTimeout({{txtGlobalTimeout}});
        } catch (SystemException e) {
            e.printStackTrace();
        }
        return userTransaction;
    }

    @Bean(initMethod = "init", destroyMethod = "close")
    public UserTransactionManager atomikosTransactionManager() {
        UserTransactionManager transactionManager = new UserTransactionManager();
        transactionManager.setForceShutdown(false);
        return transactionManager;
    }

    @Bean(name = "{{txtTransactionName}}")
    public PlatformTransactionManager transactionManager(UserTransactionImp userTransaction,
            UserTransactionManager atomikosTransactionManager) {
        JtaTransactionManager transactionManager = new JtaTransactionManager();
        transactionManager.setUserTransaction(userTransaction);
        transactionManager.setTransactionManager(atomikosTransactionManager);
        return transactionManager;
    }

    @Bean(name = "{{txtAdviceName}}")
    public TransactionInterceptor txAdvice(PlatformTransactionManager transactionManager) {
        TransactionInterceptor txAdvice = new TransactionInterceptor();
        txAdvice.setTransactionManager(transactionManager);
        txAdvice.setTransactionAttributeSource(getNameMatchTransactionAttributeSource());
        return txAdvice;
    }

    private NameMatchTransactionAttributeSource getNameMatchTransactionAttributeSource() {
        NameMatchTransactionAttributeSource txAttributeSource = new NameMatchTransactionAttributeSource();
        txAttributeSource.setNameMap(getRuleBasedTxAttributeMap());
        return txAttributeSource;
    }

    private HashMap<String, TransactionAttribute> getRuleBasedTxAttributeMap() {
        HashMap<String, TransactionAttribute> txMethods = new HashMap<String, TransactionAttribute>();

        RuleBasedTransactionAttribute txAttribute = new RuleBasedTransactionAttribute();
        txAttribute.setPropagationBehavior(TransactionDefinition.PROPAGATION_{{cmbPropagation}});
        txAttribute.setIsolationLevel(TransactionDefinition.ISOLATION_{{cmbIsolation}});
        txAttribute.setReadOnly({{chkReadOnly}});

        List<RollbackRuleAttribute> rollbackRules = new ArrayList<>();
        {{#if chkRollbackFor}}
        rollbackRules.add(new RollbackRuleAttribute({{txtRollbackFor}}.class));
        {{/if}}
        {{#if chkNoRollbackFor}}
        rollbackRules.add(new NoRollbackRuleAttribute({{txtNoRollbackFor}}.class));
        {{/if}}
        txAttribute.setRollbackRules(rollbackRules);
        
        {{#if chkTimeout}}
        txAttribute.setTimeout({{txtTimeout}});
        {{/if}}

        txMethods.put("{{txtMethodName}}", txAttribute);
        return txMethods;
    }

    @Bean
    public Advisor txAdvisor(PlatformTransactionManager txManager) {
        AspectJExpressionPointcut pointcut = new AspectJExpressionPointcut();
        pointcut.setExpression("{{txtPointCutExpression}}");
        return new DefaultPointcutAdvisor(pointcut, txAdvice(txManager));
    }
}

package {{defaultPackageName}}.config;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import javax.sql.DataSource;

import org.springframework.aop.Advisor;
import org.springframework.aop.aspectj.AspectJExpressionPointcut;
import org.springframework.aop.support.DefaultPointcutAdvisor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.EnableAspectJAutoProxy;
import org.springframework.jdbc.datasource.DataSourceTransactionManager;
import org.springframework.transaction.TransactionDefinition;
import org.springframework.transaction.annotation.EnableTransactionManagement;
import org.springframework.transaction.interceptor.NameMatchTransactionAttributeSource;
import org.springframework.transaction.interceptor.NoRollbackRuleAttribute;
import org.springframework.transaction.interceptor.RollbackRuleAttribute;
import org.springframework.transaction.interceptor.RuleBasedTransactionAttribute;
import org.springframework.transaction.interceptor.TransactionAttribute;
import org.springframework.transaction.interceptor.TransactionInterceptor;
import org.springframework.transaction.support.TransactionTemplate;

@Configuration
@EnableAspectJAutoProxy(proxyTargetClass = true)
{{#if chkAnnotationTransactionManagement}}
@EnableTransactionManagement
{{/if}}
public class {{txtFileName}} {

  @Bean(name = "{{txtTransactionName}}")
  public DataSourceTransactionManager txManager(@Qualifier("{{txtDatasourceName}}") DataSource dataSource) {
    DataSourceTransactionManager dataSourceTransactionManager = new DataSourceTransactionManager();
    dataSourceTransactionManager.setDataSource(dataSource);
    return dataSourceTransactionManager;
  }

  {{#if chkTransactionTemplate}}
  @Bean(name = "{{txtTransactionTemplateName}}")
  public TransactionTemplate transactionTemplate(@Qualifier("{{txtTransactionName}}") DataSourceTransactionManager transactionManager) {
    return new TransactionTemplate(transactionManager);
  }
  {{/if}}

  {{#if chkConfigurationalTransactionManagement}}
  @Bean(name = "{{txtAdviceName}}")
  public TransactionInterceptor txAdvice(@Qualifier("{{txtTransactionName}}") DataSourceTransactionManager transactionManager) {
    TransactionInterceptor txAdvice = new TransactionInterceptor();
    txAdvice.setTransactionManager(transactionManager);
    txAdvice.setTransactionAttributeSource(getNameMatchTransactionAttributeSource());
    return txAdvice;
  }

  private NameMatchTransactionAttributeSource getNameMatchTransactionAttributeSource() {
    NameMatchTransactionAttributeSource txAttributeSource = new NameMatchTransactionAttributeSource();
    txAttributeSource.setNameMap(getRuleBasedTxAttributeMap());
    return txAttributeSource;
  }

  private HashMap<String, TransactionAttribute> getRuleBasedTxAttributeMap() {
    HashMap<String, TransactionAttribute> txMethods = new HashMap<String, TransactionAttribute>();

    RuleBasedTransactionAttribute txAttribute = new RuleBasedTransactionAttribute();
    txAttribute.setPropagationBehavior(TransactionDefinition.PROPAGATION_{{cmbPropagation}});
    txAttribute.setIsolationLevel(TransactionDefinition.ISOLATION_{{cmbIsolation}});
    txAttribute.setReadOnly({{chkReadOnly}});

    List<RollbackRuleAttribute> rollbackRules = new ArrayList<>();
    {{#if chkRollbackFor}}
    rollbackRules.add(new RollbackRuleAttribute({{txtRollbackFor}}.class));
    {{else}}
    rollbackRules.add(new RollbackRuleAttribute(Exception.class));
    {{/if}}
    
    {{#if chkNoRollbackFor}}
    rollbackRules.add(new NoRollbackRuleAttribute({{txtNoRollbackFor}}.class));
    {{/if}}

    txAttribute.setRollbackRules(rollbackRules);
    
    {{#if chkTimeout}}
    txAttribute.setTimeout({{txtTimeout}});
    {{/if}}

    txMethods.put("{{txtMethodName}}", txAttribute);
    return txMethods;
  }

  // -------------------------------------------------------------
	// TransactionAdvisor 설정
	// -------------------------------------------------------------
  @Bean
  public Advisor txAdvisor(@Qualifier("{{txtTransactionName}}") DataSourceTransactionManager txManager) {
    AspectJExpressionPointcut pointcut = new AspectJExpressionPointcut();
    pointcut.setExpression("{{txtPointCutExpression}}");
    return new DefaultPointcutAdvisor(pointcut, txAdvice(txManager));
  }
  {{/if}}
}
